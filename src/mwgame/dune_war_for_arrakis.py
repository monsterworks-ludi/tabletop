import sympy as sp

from icecream import ic  # type: ignore
from pprint import pprint

import mwmath.adjacency_matrices as am

def main() -> None:
    emptyset: set[int] = set()
    connections = {
        0: emptyset,
        1: {2, 6, 5},
        2: {3, 7, 6, 1},
        3: {4, 13, 12, 11, 7, 2},
        4: {21, 28, 14, 13, 3},
        5: {1, 6, 9, 8},
        6: {1, 2, 7, 10, 9, 5},
        7: {2, 3, 11, 10, 6},
        8: {5, 9, 15, 44, 39},
        9: {6, 10, 16, 15, 8, 5},
        10: {6, 7, 11, 17, 16, 9},
        11: {7, 3, 12, 18, 17, 10},
        12: {3, 13, 19, 18, 11},
        13: {4, 14, 19, 12, 3},
        14: {4, 28, 68, 20, 19, 13},
        15: {9, 16, 59, 46, 44, 8},
        16: {9, 10, 17, 59, 15},
        17: {10, 11, 18, 60, 59, 16},
        18: {11, 12, 19, 61, 60, 17},
        19: {12, 13, 14, 61, 18},
        20: {14, 68, 62, 61},

        21: {22, 29, 28, 4},
        22: {23, 31, 30, 29, 21},
        23: {24, 32, 31, 22},
        24: {25, 32, 23},
        25: {26, 35, 32, 24},
        26: {27, 37, 35, 25},
        27: {52, 56, 38, 37, 26},
        28: {21, 29, 14, 4},
        29: {21, 22, 30, 28},
        30: {22, 31, 33, 34, 29},
        31: {22, 23, 32, 33, 30},
        32: {23, 24, 25, 35, 33, 31},
        33: {31, 32, 35, 36, 34, 30},
        34: {30, 33, 36, 72, 71},
        35: {25, 26, 37, 36, 33, 32},
        36: {33, 35, 37, 72, 34},
        37: {26, 27, 38, 73, 72, 36, 35},
        38: {37, 27, 56, 58, 73},

        39: {8, 44, 45, 40},
        40: {39, 45, 41},
        41: {40, 45, 47, 42},
        42: {41, 47, 48, 43},
        43: {42, 48, 86, 87, 92},
        44: {8, 15, 46, 45, 39},
        45: {39, 44, 46, 47, 41, 40},
        46: {15, 59, 84, 47, 45, 44},
        47: {46, 84, 85, 48, 42, 41, 45},
        48: {47, 85, 86, 43, 42},

        49: {92, 93, 94, 57, 53, 50},
        50: {49, 53, 54, 55, 51},
        51: {50, 55, 52},
        52: {51, 55, 56, 27},
        53: {49, 57, 54, 50},
        54: {53, 57, 58, 56, 55, 50},
        55: {56, 52, 51, 50, 54},
        56: {38, 27, 52, 55, 54, 58},
        57: {49, 94, 95, 58, 54, 53},
        58: {73, 38, 56, 54, 57, 95, 96},

        59: {15, 16, 17, 60, 63, 84, 46},
        60: {17, 18, 64, 63, 59},
        61: {18, 19, 20, 62, 65, 64},
        62: {20, 68, 74, 65, 61},
        63: {59, 60, 64, 67, 88, 84},
        64: {60, 61, 65, 66, 67, 63},
        65: {61, 62, 74, 77, 78, 66, 64},
        66: {64, 65, 78, 83, 67},
        67: {63, 64, 66, 83, 101, 91, 89, 88},
        68: {69, 75, 74, 62, 20, 14},
        69: {68, 70, 76, 75},
        70: {69, 71, 82, 81, 80, 76},
        71: {70, 34, 82},
        72: {34, 36, 37, 73, 82},
        73: {37, 38, 58, 96, 82, 72},
        74: {62, 68, 75, 77, 65},
        75: {68, 69, 76, 77, 74},
        76: {69, 70, 80, 79, 77, 75},
        77: {74, 75, 76, 79, 78, 65},
        78: {77, 79, 83, 66, 65},
        79: {78, 77, 76, 80, 83},
        80: {70, 81, 100, 99, 83, 79, 76},
        81: {80, 70, 82, 96, 100},
        82: {70, 71, 72, 73, 96, 81},
        83: {78, 79, 80, 99, 101, 67, 66},

        84: {59, 63, 88, 85, 47, 46},
        85: {84, 88, 86, 48, 47},
        86: {85, 88, 89, 90, 87, 43, 48},
        87: {90, 97, 92, 43, 86},
        88: {63, 67, 89, 86, 85, 84},
        89: {88, 67, 91, 90, 86},
        90: {91, 99, 97, 87, 86, 89},
        91: {67, 101, 99, 90, 89},

        92: {97, 93, 49, 43, 87},
        93: {97, 94, 49, 92},
        94: {98, 95, 57, 49, 93, 97},
        95: {96, 58, 57, 94, 98, 100},
        96: {81, 82, 73, 58, 95, 100},
        97: {99, 98, 94, 93, 92, 87, 90},
        98: {100, 95, 94, 97, 99},
        99: {83, 80, 100, 98, 97, 90, 91, 101},
        100: {80, 81, 96, 95, 98, 99},

        101: {67, 83, 99, 91}
    }

    matrix = am.build_matrix(connections)
    transpose = matrix.transpose()
    assert matrix == transpose

    sietches = (3, 16, 23, 37, 45, 54, 86, 93)

    distance_to_sietch: dict[int, list[tuple[int, int]]] = {}
    # space -> [ (sietch, distance), ...]

    adjacency_matrix = sp.eye(len(connections))
    for steps in range(6):
        for space in (space for space in connections if space not in distance_to_sietch):
            distances = []
            for sietch in sietches:
                if not adjacency_matrix[sietch, space] == 0:
                    distances.append((sietch, steps))
            if len(distances) > 0:
                distance_to_sietch[space] = distances
        adjacency_matrix = adjacency_matrix * matrix

    pprint(distance_to_sietch)

if __name__ == "__main__":
    main()
